package unityEngine;
import cs.NativeArray;
@:native("UnityEngine.Rigidbody") extern class Rigidbody extends Component {
	var velocity:unityEngine.Vector3;
	var angularVelocity:unityEngine.Vector3;
	var drag:Float;
	var angularDrag:Float;
	var mass:Float;
	var useGravity:Bool;
	var isKinematic:Bool;
	var freezeRotation:Bool;
	var constraints:unityEngine.RigidbodyConstraints;
	var collisionDetectionMode:unityEngine.CollisionDetectionMode;
	var centerOfMass:unityEngine.Vector3;
	var worldCenterOfMass:unityEngine.Vector3;
	var inertiaTensorRotation:unityEngine.Quaternion;
	var inertiaTensor:unityEngine.Vector3;
	var detectCollisions:Bool;
	var useConeFriction:Bool;
	var position:unityEngine.Vector3;
	var rotation:unityEngine.Quaternion;
	var interpolation:unityEngine.RigidbodyInterpolation;
	var solverIterationCount:Int;
	var sleepVelocity:Float;
	var sleepAngularVelocity:Float;
	var maxAngularVelocity:Float;
	function SetDensity(density:Float):Void;
	function AddForce(x:Float, y:Float, z:Float, mode:unityEngine.ForceMode = ForceMode.Force):Void;
	function AddRelativeForce(x:Float, y:Float, z:Float, mode:unityEngine.ForceMode = ForceMode.Force):Void;
	function AddTorque(x:Float, y:Float, z:Float, mode:unityEngine.ForceMode = ForceMode.Force):Void;
	function AddRelativeTorque(x:Float, y:Float, z:Float, mode:unityEngine.ForceMode = ForceMode.Force):Void;
	function AddForceAtPosition(force:unityEngine.Vector3, position:unityEngine.Vector3, mode:unityEngine.ForceMode = ForceMode.Force):Void;
	function AddExplosionForce(explosionForce:Float, explosionPosition:unityEngine.Vector3, explosionRadius:Float, upwardsModifier:Float = 0.0, mode:unityEngine.ForceMode = ForceMode.Force):Void;
	function ClosestPointOnBounds(position:unityEngine.Vector3):unityEngine.Vector3;
	function GetRelativePointVelocity(relativePoint:unityEngine.Vector3):unityEngine.Vector3;
	function GetPointVelocity(worldPoint:unityEngine.Vector3):unityEngine.Vector3;
	function MovePosition(position:unityEngine.Vector3):Void;
	function MoveRotation(rot:unityEngine.Quaternion):Void;
	function Sleep():Void;
	function IsSleeping():Bool;
	function WakeUp():Void;
	function SweepTest(direction:unityEngine.Vector3, hitInfo:unityEngine.RaycastHit, distance:Float = Mathf.Infinity):Bool;
	function SweepTestAll(direction:unityEngine.Vector3, distance:Float = Mathf.Infinity):NativeArray<RaycastHit>;
}