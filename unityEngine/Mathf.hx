package unityEngine;
@:native("UnityEngine.Mathf") extern class Mathf {
	function Sin(f:Float):Float;
	function Cos(f:Float):Float;
	function Tan(f:Float):Float;
	function Asin(f:Float):Float;
	function Acos(f:Float):Float;
	function Atan(f:Float):Float;
	function Atan2(y:Float, x:Float):Float;
	function Sqrt(f:Float):Float;
	function Abs(value:Int):Int;
	function Min(params values:unityEngine.Array<int>):Int;
	function Max(params values:unityEngine.Array<int>):Int;
	function Pow(f:Float, p:Float):Float;
	function Exp(power:Float):Float;
	function Log(f:Float):Float;
	function Log10(f:Float):Float;
	function Ceil(f:Float):Float;
	function Floor(f:Float):Float;
	function Round(f:Float):Float;
	function CeilToInt(f:Float):Int;
	function FloorToInt(f:Float):Int;
	function RoundToInt(f:Float):Int;
	function Sign(f:Float):Float;
	function Clamp(value:Int, min:Int, max:Int):Int;
	function Clamp01(value:Float):Float;
	function Lerp(from:Float, to:Float, t:Float):Float;
	function LerpAngle(a:Float, b:Float, t:Float):Float;
	function MoveTowards(current:Float, target:Float, maxDelta:Float):Float;
	function MoveTowardsAngle(current:Float, target:Float, maxDelta:Float):Float;
	function SmoothStep(from:Float, to:Float, t:Float):Float;
	function Approximately(a:Float, b:Float):Bool;
	function SmoothDamp(current:Float, target:Float, ref currentVelocity:Float, smoothTime:Float, maxSpeed:unityEngine.float = Mathf.Infinity, deltaTime:unityEngine.float = Time.deltaTime):Float;
	function SmoothDampAngle(current:Float, target:Float, ref currentVelocity:Float, smoothTime:Float, maxSpeed:unityEngine.float = Mathf.Infinity, deltaTime:unityEngine.float = Time.deltaTime):Float;
	function Repeat(t:Float, length:Float):Float;
	function PingPong(t:Float, length:Float):Float;
	function InverseLerp(from:Float, to:Float, value:Float):Float;
	function ClosestPowerOfTwo(value:Int):Int;
	function GammaToLinearSpace(value:Float):Float;
	function LinearToGammaSpace(value:Float):Float;
	function IsPowerOfTwo(value:Int):Bool;
	function NextPowerOfTwo(value:Int):Int;
	function DeltaAngle(current:Float, target:Float):Float;
	function PerlinNoise(x:Float, y:Float):Float;
}