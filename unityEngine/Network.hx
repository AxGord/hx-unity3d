package unityEngine;
@:native("UnityEngine.Network") extern class Network {
	static var incomingPassword:String;
	static var logLevel:unityEngine.NetworkLogLevel;
	static var connections:unityEngine.Array<NetworkPlayer>;
	static var player:unityEngine.NetworkPlayer;
	static var isClient:Bool;
	static var isServer:Bool;
	static var peerType:unityEngine.NetworkPeerType;
	static var sendRate:Float;
	static var isMessageQueueRunning:Bool;
	static var time:unityEngine.double;
	static var minimumAllocatableViewIDs:Int;
	static var natFacilitatorIP:String;
	static var natFacilitatorPort:Int;
	static var connectionTesterIP:String;
	static var connectionTesterPort:Int;
	static var maxConnections:Int;
	static var proxyIP:String;
	static var proxyPort:Int;
	static var useProxy:Bool;
	static var proxyPassword:String;
	function InitializeServer(connections:Int, listenPort:Int, useNat:Bool):unityEngine.NetworkConnectionError;
	function InitializeSecurity():Void;
	function Connect(hostData:unityEngine.HostData, password:unityEngine.String = ""):unityEngine.NetworkConnectionError;
	function Disconnect(timeout:unityEngine.int = 200):Void;
	function CloseConnection(target:unityEngine.NetworkPlayer, sendDisconnectionNotification:Bool):Void;
	function AllocateViewID():unityEngine.NetworkViewID;
	function Instantiate(prefab:unityEngine.Object, position:unityEngine.Vector3, rotation:unityEngine.Quaternion, group:Int):unityEngine.Object;
	function Destroy(gameObject:unityEngine.GameObject):Void;
	function DestroyPlayerObjects(playerID:unityEngine.NetworkPlayer):Void;
	function RemoveRPCs(viewID:unityEngine.NetworkViewID):Void;
	function RemoveRPCsInGroup(group:Int):Void;
	function SetLevelPrefix(prefix:Int):Void;
	function GetLastPing(player:unityEngine.NetworkPlayer):Int;
	function GetAveragePing(player:unityEngine.NetworkPlayer):Int;
	function SetReceivingEnabled(player:unityEngine.NetworkPlayer, group:Int, enabled:Bool):Void;
	function SetSendingEnabled(player:unityEngine.NetworkPlayer, group:Int, enabled:Bool):Void;
	function TestConnection(forceTest:unityEngine.boolean = false):unityEngine.ConnectionTesterStatus;
	function TestConnectionNAT(forceTest:unityEngine.boolean = false):unityEngine.ConnectionTesterStatus;
	function HavePublicAddress():Bool;
}